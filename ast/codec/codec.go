package codec

type FrameType uint8

const (
	UNKNOWN FrameType = iota
	END               // END means some statement (e.g block statement) should end
	FIN               // FIN means the end of encoded binary

	// Declaration/Properties
	ACL_DECLARATION
	ACL_CIDR
	BACKEND_DECLARATION
	BACKEND_PROPERTY
	BACKEND_PROBE
	DIRECTOR_DECLARATION
	DIRECTOR_PROPERTY
	DIRECTOR_BACKEND
	PENALTYBOX_DECLARATION
	RATECOUNTER_DECLARATION
	SUBROUTINE_DECLARATION
	TABLE_DECLARATION
	TABLE_PROPERTY

	// Statements
	ADD_STATEMENT
	BLOCK_STATEMENT
	BREAK_STATEMENT
	CALL_STATEMENT
	CASE_STATEMENT
	DECLARE_STATEMENT
	ELSEIF_STATEMENT
	ELSE_STATEMENT
	ERROR_STATEMENT
	ESI_STATEMENT
	FALLTHROUGH_STATEMENT
	FUNCTIONCALL_STATEMENT
	GOTO_STATEMENT
	GOTO_DESTINATION_STATEMENT
	IF_STATEMENT
	IMPORT_STATEMENT
	INCLUDE_STATEMENT
	LOG_STATEMENT
	REMOVE_STATEMENT
	RESTART_STATEMENT
	RETURN_STATEMENT
	SET_STATEMENT
	SWITCH_STATEMENT
	SYNTHETIC_STATEMENT
	SYNTHETIC_BASE64_STATEMENT
	UNSET_STATEMENT

	// Expressions
	GROUPED_EXPRESSION
	INFIX_EXPRESSION
	POSTFIX_EXPRESSION
	PREFIX_EXPRESSION
	IF_EXPRESSION
	FUNCTIONCALL_EXPRESSION

	// Values
	FLOAT_VALUE
	IP_VALUE
	IDENT_VALUE
	BOOL_VALUE
	INTEGER_VALUE
	RTIME_VALUE
	STRING_VALUE
	OPERATOR

	// Root VCL
	VCL
)

// nolint:funlen,gocyclo
func (ft FrameType) String() string {
	switch ft {
	case END:
		return "END"
	case ACL_DECLARATION:
		return "ACL_DECLARATION"
	case ACL_CIDR:
		return "ACL_CIDR"
	case BACKEND_DECLARATION:
		return "BACKEND_DECLARATION"
	case BACKEND_PROPERTY:
		return "BACKEND_PROPERTY"
	case BACKEND_PROBE:
		return "BACKEND_PROBE"
	case DIRECTOR_DECLARATION:
		return "DIRECTOR_DECLARATION"
	case DIRECTOR_PROPERTY:
		return "DIRECTOR_PROPERTY"
	case DIRECTOR_BACKEND:
		return "DIRECTOR_BACKEND"
	case PENALTYBOX_DECLARATION:
		return "PENALTYBOX_DECLARATION"
	case RATECOUNTER_DECLARATION:
		return "RATECOUNTER_DECLARATION"
	case SUBROUTINE_DECLARATION:
		return "SUBROUTINE_DECLARATION"
	case TABLE_DECLARATION:
		return "TABLE_DECLARATION"
	case TABLE_PROPERTY:
		return "TABLE_PROPERTY"
	case ADD_STATEMENT:
		return "ADD_STATEMENT"
	case BREAK_STATEMENT:
		return "BREAK_STATEMENT"
	case CALL_STATEMENT:
		return "CALL_STATEMENT"
	case CASE_STATEMENT:
		return "CASE_STATEMENT"
	case DECLARE_STATEMENT:
		return "DECLARE_STATEMENT"
	case ELSEIF_STATEMENT:
		return "ELSEIF_STATEMENT"
	case ELSE_STATEMENT:
		return "ELSE_STATEMENT"
	case ERROR_STATEMENT:
		return "ERROR_STATEMENT"
	case ESI_STATEMENT:
		return "ESI_STATEMENT"
	case FALLTHROUGH_STATEMENT:
		return "FALLTHROUGH_STATEMENT"
	case FUNCTIONCALL_STATEMENT:
		return "FUNCTIONCALL_STATEMENT"
	case GOTO_STATEMENT:
		return "GOTO_STATEMENT"
	case GOTO_DESTINATION_STATEMENT:
		return "GOTO_DESTINATION_STATEMENT"
	case IF_STATEMENT:
		return "IF_STATEMENT"
	case IMPORT_STATEMENT:
		return "IMPORT_STATEMENT"
	case INCLUDE_STATEMENT:
		return "INCLUDE_STATEMENT"
	case LOG_STATEMENT:
		return "LOG_STATEMENT"
	case REMOVE_STATEMENT:
		return "REMOVE_STATEMENT"
	case RESTART_STATEMENT:
		return "RESTART_STATEMENT"
	case RETURN_STATEMENT:
		return "RETURN_STATEMENT"
	case SET_STATEMENT:
		return "SET_STATEMENT"
	case SWITCH_STATEMENT:
		return "SWITCH_STATEMENT"
	case SYNTHETIC_STATEMENT:
		return "SYNTHETIC_STATEMENT"
	case SYNTHETIC_BASE64_STATEMENT:
		return "SYNTHETIC_BASE64_STATEMENT"
	case UNSET_STATEMENT:
		return "UNSET_STATEMENT"
	case GROUPED_EXPRESSION:
		return "GROUPED_EXPRESSION"
	case INFIX_EXPRESSION:
		return "INFIX_EXPRESSION"
	case POSTFIX_EXPRESSION:
		return "POSTFIX_EXPRESSION"
	case PREFIX_EXPRESSION:
		return "PREFIX_EXPRESSION"
	case FLOAT_VALUE:
		return "FLOAT_VALUE"
	case IP_VALUE:
		return "IP_VALUE"
	case IDENT_VALUE:
		return "IDENT_VALUE"
	case BOOL_VALUE:
		return "BOOL_VALUE"
	case INTEGER_VALUE:
		return "INTEGER_VALUE"
	case RTIME_VALUE:
		return "RTIME_VALUE"
	case STRING_VALUE:
		return "STRING_VALUE"
	case OPERATOR:
		return "OPERATOR"
	case VCL:
		return "VCL"
	default:
		return "UNKNOWN"
	}
}
