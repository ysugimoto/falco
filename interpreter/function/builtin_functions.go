// Code generated by __generator__/interpreter.go; DO NOT EDIT.

package function

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/builtin"
	"github.com/ysugimoto/falco/interpreter/value"
)

var builtinFunctions = map[string]*Function{
	"accept.charset_lookup": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Accept_charset_lookup(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"accept.encoding_lookup": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Accept_encoding_lookup(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"accept.language_filter_basic": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Accept_language_filter_basic(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"accept.language_lookup": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Accept_language_lookup(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"accept.media_lookup": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Accept_media_lookup(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"addr.extract_bits": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Addr_extract_bits(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"addr.is_ipv4": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Addr_is_ipv4(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"addr.is_ipv6": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Addr_is_ipv6(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"bin.base64_to_hex": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Bin_base64_to_hex(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"bin.hex_to_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Bin_hex_to_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"boltsort.sort": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Boltsort_sort(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"crypto.decrypt_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Crypto_decrypt_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0 || i == 1 || i == 2
		},
	},
	"crypto.decrypt_hex": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Crypto_decrypt_hex(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0 || i == 1 || i == 2
		},
	},
	"crypto.encrypt_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Crypto_encrypt_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0 || i == 1 || i == 2
		},
	},
	"crypto.encrypt_hex": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Crypto_encrypt_hex(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0 || i == 1 || i == 2
		},
	},
	"cstr_escape": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Cstr_escape(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.awsv4_hmac": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_awsv4_hmac(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.base64_decode": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_base64_decode(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.base64url": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_base64url(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.base64url_decode": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_base64url_decode(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.base64url_nopad": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_base64url_nopad(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.base64url_nopad_decode": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_base64url_nopad_decode(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_crc32": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_crc32(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_crc32b": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_crc32b(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_md5": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_md5(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_sha1": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_sha1(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_sha1_from_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_sha1_from_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_sha224": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_sha224(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_sha256": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_sha256(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_sha256_from_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_sha256_from_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_sha384": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_sha384(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_sha512": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_sha512(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hash_sha512_from_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hash_sha512_from_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hmac_md5": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hmac_md5(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hmac_md5_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hmac_md5_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hmac_sha1": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hmac_sha1(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hmac_sha1_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hmac_sha1_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hmac_sha256": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hmac_sha256(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hmac_sha256_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hmac_sha256_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hmac_sha512": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hmac_sha512(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.hmac_sha512_base64": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_hmac_sha512_base64(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.rsa_verify": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_rsa_verify(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0 || i == 4
		},
	},
	"digest.secure_is_equal": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_secure_is_equal(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.time_hmac_md5": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_time_hmac_md5(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.time_hmac_sha1": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_time_hmac_sha1(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.time_hmac_sha256": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_time_hmac_sha256(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"digest.time_hmac_sha512": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Digest_time_hmac_sha512(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"early_hints": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Early_hints(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"fastly.hash": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Fastly_hash(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"fastly.try_select_shield": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Fastly_try_select_shield(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"h2.disable_header_compression": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.H2_disable_header_compression(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"h2.push": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.H2_push(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"h3.alt_svc": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.H3_alt_svc(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"header.filter": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Header_filter(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"header.filter_except": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Header_filter_except(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"header.get": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Header_get(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"header.set": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Header_set(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"header.unset": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Header_unset(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"http_status_matches": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Http_status_matches(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"json.escape": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Json_escape(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.acos": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_acos(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.acosh": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_acosh(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.asin": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_asin(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.asinh": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_asinh(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.atan": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_atan(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.atan2": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_atan2(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.atanh": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_atanh(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.ceil": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_ceil(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.cos": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_cos(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.cosh": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_cosh(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.exp": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_exp(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.exp2": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_exp2(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.floor": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_floor(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.is_finite": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_is_finite(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.is_infinite": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_is_infinite(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.is_nan": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_is_nan(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.is_normal": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_is_normal(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.is_subnormal": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_is_subnormal(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.log": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_log(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.log10": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_log10(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.log2": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_log2(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.round": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_round(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.roundeven": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_roundeven(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.roundhalfdown": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_roundhalfdown(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.roundhalfup": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_roundhalfup(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.sin": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_sin(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.sinh": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_sinh(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.sqrt": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_sqrt(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.tan": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_tan(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.tanh": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_tanh(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"math.trunc": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Math_trunc(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"parse_time_delta": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Parse_time_delta(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.add": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_add(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.clean": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_clean(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.filter": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_filter(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.filter_except": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_filter_except(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.filtersep": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_filtersep(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.get": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_get(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.globfilter": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_globfilter(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.globfilter_except": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_globfilter_except(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.regfilter": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_regfilter(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.regfilter_except": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_regfilter_except(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.remove": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_remove(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.set": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_set(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"querystring.sort": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Querystring_sort(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"randombool": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Randombool(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"randombool_seeded": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Randombool_seeded(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"randomint": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Randomint(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"randomint_seeded": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Randomint_seeded(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"randomstr": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Randomstr(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"ratelimit.check_rate": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Ratelimit_check_rate(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 1 || i == 5
		},
	},
	"ratelimit.check_rates": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Ratelimit_check_rates(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 1 || i == 5 || i == 9
		},
	},
	"ratelimit.penaltybox_add": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Ratelimit_penaltybox_add(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"ratelimit.penaltybox_has": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Ratelimit_penaltybox_has(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"ratelimit.ratecounter_increment": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Ratelimit_ratecounter_increment(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"regsub": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Regsub(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"regsuball": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Regsuball(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"resp.tarpit": {
		Scope: context.DeliverScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Resp_tarpit(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"setcookie.delete_by_name": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Setcookie_delete_by_name(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"setcookie.get_value_by_name": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Setcookie_get_value_by_name(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"std.anystr2ip": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_anystr2ip(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.atof": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_atof(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.atoi": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_atoi(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.basename": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_basename(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.collect": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_collect(ctx, args...)
		},
		CanStatementCall: true,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"std.count": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_count(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return i == 0
		},
	},
	"std.dirname": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_dirname(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.integer2time": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_integer2time(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.ip": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_ip(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.ip2str": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_ip2str(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.itoa": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_itoa(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.itoa_charset": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_itoa_charset(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.prefixof": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_prefixof(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.replace": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_replace(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.replace_prefix": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_replace_prefix(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.replace_suffix": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_replace_suffix(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.replaceall": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_replaceall(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.str2ip": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_str2ip(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.strlen": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_strlen(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.strpad": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_strpad(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.strrep": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_strrep(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.strrev": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_strrev(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.strstr": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_strstr(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.strtof": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_strtof(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.strtol": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_strtol(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.suffixof": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_suffixof(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.time": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_time(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.tolower": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_tolower(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"std.toupper": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Std_toupper(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"strftime": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Strftime(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"subfield": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Subfield(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"substr": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Substr(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.contains": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_contains(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.lookup": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_lookup(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.lookup_acl": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_lookup_acl(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.lookup_backend": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_lookup_backend(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.lookup_bool": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_lookup_bool(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.lookup_float": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_lookup_float(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.lookup_integer": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_lookup_integer(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.lookup_ip": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_lookup_ip(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"table.lookup_rtime": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Table_lookup_rtime(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"time.add": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Time_add(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"time.hex_to_time": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Time_hex_to_time(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"time.interval_elapsed_ratio": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Time_interval_elapsed_ratio(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"time.is_after": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Time_is_after(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"time.runits": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Time_runits(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"time.sub": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Time_sub(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"time.units": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Time_units(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"urldecode": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Urldecode(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"urlencode": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Urlencode(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"utf8.codepoint_count": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Utf8_codepoint_count(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"utf8.is_valid": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Utf8_is_valid(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"utf8.strpad": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Utf8_strpad(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"utf8.substr": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Utf8_substr(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.dns": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_dns(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.is_valid": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_is_valid(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.is_version3": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_is_version3(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.is_version4": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_is_version4(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.is_version5": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_is_version5(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.oid": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_oid(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.url": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_url(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.version3": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_version3(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.version4": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_version4(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.version5": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_version5(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"uuid.x500": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Uuid_x500(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
	"xml_escape": {
		Scope: context.RecvScope | context.HashScope | context.HitScope | context.MissScope | context.PassScope | context.FetchScope | context.ErrorScope | context.DeliverScope | context.LogScope,
		Call: func(ctx *context.Context, args ...value.Value) (value.Value, error) {
			return builtin.Xml_escape(ctx, args...)
		},
		CanStatementCall: false,
		IsIdentArgument: func(i int) bool {
			return false
		},
	},
}
