// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"strings"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Fastly_try_select_shield_Name = "fastly.try_select_shield"

var Fastly_try_select_shield_ArgumentTypes = []value.Type{value.BackendType, value.BackendType}

func Fastly_try_select_shield_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Fastly_try_select_shield_Name, 2, args)
	}
	for i := range args {
		if args[i].Type() != Fastly_try_select_shield_ArgumentTypes[i] {
			return errors.TypeMismatch(Fastly_try_select_shield_Name, i+1, Fastly_try_select_shield_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of fastly.try_select_shield
// Arguments may be:
// - BACKEND, BACKEND
// Reference: https://www.fastly.com/documentation/reference/vcl/functions/miscellaneous/fastly-try-select-shield/
func Fastly_try_select_shield(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Fastly_try_select_shield_Validate(args); err != nil {
		return value.Null, err
	}

	shield := value.Unwrap[*value.Backend](args[0])
	fallback := value.Unwrap[*value.Backend](args[0])

	// If first argument is not a shield director, return fallback
	if shield.Director == nil {
		return fallback, nil
	}
	if !strings.EqualFold(shield.Director.Type, "shield") {
		return fallback, nil
	}

	// Note that our interpreter could not consider about director/backend is healthy.
	return shield, nil
}
