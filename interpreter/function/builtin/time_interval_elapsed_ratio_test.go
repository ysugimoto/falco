// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of time.interval_elapsed_ratio
// Arguments may be:
// - TIME, TIME, TIME
// Reference: https://developer.fastly.com/documentation/reference/vcl/functions/date-and-time/time-interval-elapsed-ratio/
func Test_Time_interval_elapsed_ratio(t *testing.T) {
	tests := []struct {
		ref    time.Time
		start  time.Time
		end    time.Time
		expect string
	}{
		{
			ref:    time.Unix(1711461359, 0),
			start:  time.Date(2024, 1, 1, 0, 0, 0, 0, time.UTC),
			end:    time.Date(2025, 1, 1, 0, 0, 0, 0, time.UTC),
			expect: "0.234",
		},
	}

	for i, tt := range tests {
		ret, err := Time_interval_elapsed_ratio(
			&context.Context{},
			&value.Time{Value: tt.ref},
			&value.Time{Value: tt.start},
			&value.Time{Value: tt.end},
		)
		if err != nil {
			t.Errorf("[%d] Unexpected error: %s", i, err)
		}
		if ret.Type() != value.FloatType {
			t.Errorf("[%d] Unexpected return type, expect=FLOAT, got=%s", i, ret.Type())
		}
		v := value.Unwrap[*value.Float](ret)
		if diff := cmp.Diff(tt.expect, v.String()); diff != "" {
			t.Errorf("[%d] Return value unmatch, diff=%s", i, diff)
		}
	}
}
