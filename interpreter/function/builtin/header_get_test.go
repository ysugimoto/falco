// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"net"
	ghttp "net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/ysugimoto/falco/ast"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/http"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of header.get
// Arguments may be:
// - ID, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/headers/header-get/
func Test_Header_get(t *testing.T) {

	t.Run("Invalid arguments", func(t *testing.T) {
		tests := []struct {
			name    value.Value
			expect  string
			isError bool
		}{
			{name: &value.String{Value: ""}, expect: ""},
			{name: &value.String{Value: "Invalid%Header$<>"}, expect: ""},
		}
		for i, tt := range tests {
			req := httptest.NewRequest(ghttp.MethodGet, "http://localhost:3124", nil)
			req.Header.Set("X-Custom-Header", "value")
			req.Header.Add("Object", "foo=valuefoo")
			req.Header.Add("Object", "bar=valuebar")
			ctx := &context.Context{Request: http.WrapRequest(req)}

			v, err := Header_get(ctx, &value.Ident{Value: "req"}, tt.name)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_get should return error but non-nil", i)
					continue
				}
			}

			if diff := cmp.Diff(v, &value.String{Value: tt.expect}); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})

	t.Run("get from req", func(t *testing.T) {
		tests := []struct {
			name    value.Value
			expect  string
			isError bool
		}{
			{name: &value.String{Value: "X-Custom-Header"}, expect: "value"},
			{name: &value.String{Value: "X-Not-Found"}, expect: ""},
			{name: &value.String{Value: "OBJECT:foo"}, expect: "valuefoo"},
			{name: &value.String{Value: "OBJECT:baz"}, expect: ""},
			{name: &value.Integer{Value: 10}, expect: ""},
			{name: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: &value.Float{Value: 10}, expect: ""},
			{name: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: &value.Boolean{Value: false}, expect: ""},
			{name: &value.Boolean{Value: true, Literal: true}, expect: ""}, // BOOL could be provide as literal
			{name: &value.RTime{Value: time.Second}, expect: ""},
			{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: &value.Time{Value: time.Now()}, expect: ""},
			{name: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: ""},
			{name: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: ""},
			{name: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			req := httptest.NewRequest(ghttp.MethodGet, "http://localhost:3124", nil)
			req.Header.Set("X-Custom-Header", "value")
			req.Header.Add("Object", "foo=valuefoo")
			req.Header.Add("Object", "bar=valuebar")
			ctx := &context.Context{Request: http.WrapRequest(req)}

			v, err := Header_get(ctx, &value.Ident{Value: "req"}, tt.name)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_get should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_get should not return error but non-nil: %s", i, err)
					continue
				}
			}

			if diff := cmp.Diff(v, &value.String{Value: tt.expect}); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})

	t.Run("get from bereq", func(t *testing.T) {
		tests := []struct {
			name    value.Value
			expect  string
			isError bool
		}{
			{name: &value.String{Value: "X-Custom-Header"}, expect: "value"},
			{name: &value.String{Value: "X-Not-Found"}, expect: ""},
			{name: &value.String{Value: "OBJECT:foo"}, expect: "valuefoo"},
			{name: &value.String{Value: "OBJECT:baz"}, expect: ""},
			{name: &value.Integer{Value: 10}, expect: ""},
			{name: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: &value.Float{Value: 10}, expect: ""},
			{name: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: &value.Boolean{Value: false}, expect: ""},
			{name: &value.Boolean{Value: true, Literal: true}, expect: ""}, // BOOL could be provide as literal
			{name: &value.RTime{Value: time.Second}, expect: ""},
			{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: &value.Time{Value: time.Now()}, expect: ""},
			{name: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: ""},
			{name: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: ""},
			{name: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			req := httptest.NewRequest(ghttp.MethodGet, "http://localhost:3124", nil)
			req.Header.Set("X-Custom-Header", "value")
			req.Header.Add("Object", "foo=valuefoo")
			req.Header.Add("Object", "bar=valuebar")
			ctx := &context.Context{BackendRequest: http.WrapRequest(req)}

			v, err := Header_get(ctx, &value.Ident{Value: "bereq"}, tt.name)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_get should return error but non-nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_get should not return error but non-nil: %s", i, err)
					continue
				}
			}

			if diff := cmp.Diff(v, &value.String{Value: tt.expect}); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})

	t.Run("get from beresp", func(t *testing.T) {
		tests := []struct {
			name    value.Value
			expect  string
			isError bool
		}{
			{name: &value.String{Value: "X-Custom-Header"}, expect: "value"},
			{name: &value.String{Value: "X-Not-Found"}, expect: ""},
			{name: &value.String{Value: "OBJECT:foo"}, expect: "valuefoo"},
			{name: &value.String{Value: "OBJECT:baz"}, expect: ""},
			{name: &value.Integer{Value: 10}, expect: ""},
			{name: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: &value.Float{Value: 10}, expect: ""},
			{name: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: &value.Boolean{Value: false}, expect: ""},
			{name: &value.Boolean{Value: true, Literal: true}, expect: ""}, // BOOL could be provide as literal
			{name: &value.RTime{Value: time.Second}, expect: ""},
			{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: &value.Time{Value: time.Now()}, expect: ""},
			{name: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: ""},
			{name: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: ""},
			{name: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			resp := &ghttp.Response{
				Header: ghttp.Header{},
			}
			resp.Header.Set("X-Custom-Header", "value")
			resp.Header.Add("Object", "foo=valuefoo")
			resp.Header.Add("Object", "bar=valuebar")
			ctx := &context.Context{BackendResponse: http.WrapResponse(resp)}

			v, err := Header_get(ctx, &value.Ident{Value: "beresp"}, tt.name)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_get should return error but non-nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_get should not return error but non-nil: %s", i, err)
					continue
				}
			}

			if diff := cmp.Diff(v, &value.String{Value: tt.expect}); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})

	t.Run("get from obj", func(t *testing.T) {
		tests := []struct {
			name    value.Value
			expect  string
			isError bool
		}{
			{name: &value.String{Value: "X-Custom-Header"}, expect: "value"},
			{name: &value.String{Value: "X-Not-Found"}, expect: ""},
			{name: &value.String{Value: "OBJECT:foo"}, expect: "valuefoo"},
			{name: &value.String{Value: "OBJECT:baz"}, expect: ""},
			{name: &value.Integer{Value: 10}, expect: ""},
			{name: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: &value.Float{Value: 10}, expect: ""},
			{name: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: &value.Boolean{Value: false}, expect: ""},
			{name: &value.Boolean{Value: true, Literal: true}, expect: ""}, // BOOL could be provide as literal
			{name: &value.RTime{Value: time.Second}, expect: ""},
			{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: &value.Time{Value: time.Now()}, expect: ""},
			{name: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: ""},
			{name: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: ""},
			{name: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			resp := &ghttp.Response{
				Header: ghttp.Header{},
			}
			resp.Header.Set("X-Custom-Header", "value")
			resp.Header.Add("Object", "foo=valuefoo")
			resp.Header.Add("Object", "bar=valuebar")
			ctx := &context.Context{Object: http.WrapResponse(resp)}

			v, err := Header_get(ctx, &value.Ident{Value: "obj"}, tt.name)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_get should return error but non-nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_get should not return error but non-nil: %s", i, err)
					continue
				}
			}

			if diff := cmp.Diff(v, &value.String{Value: tt.expect}); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})

	t.Run("get from response", func(t *testing.T) {
		tests := []struct {
			name    value.Value
			expect  string
			isError bool
		}{
			{name: &value.String{Value: "X-Custom-Header"}, expect: "value"},
			{name: &value.String{Value: "X-Not-Found"}, expect: ""},
			{name: &value.String{Value: "OBJECT:foo"}, expect: "valuefoo"},
			{name: &value.String{Value: "OBJECT:baz"}, expect: ""},
			{name: &value.Integer{Value: 10}, expect: ""},
			{name: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: &value.Float{Value: 10}, expect: ""},
			{name: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: &value.Boolean{Value: false}, expect: ""},
			{name: &value.Boolean{Value: true, Literal: true}, expect: ""}, // BOOL could be provide as literal
			{name: &value.RTime{Value: time.Second}, expect: ""},
			{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: &value.Time{Value: time.Now()}, expect: ""},
			{name: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: ""},
			{name: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: ""},
			{name: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			resp := &ghttp.Response{
				Header: ghttp.Header{},
			}
			resp.Header.Set("X-Custom-Header", "value")
			resp.Header.Add("Object", "foo=valuefoo")
			resp.Header.Add("Object", "bar=valuebar")
			ctx := &context.Context{Response: http.WrapResponse(resp)}

			v, err := Header_get(ctx, &value.Ident{Value: "resp"}, tt.name)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_get should return error but non-nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_get should not return error but non-nil: %s", i, err)
					continue
				}
			}

			if diff := cmp.Diff(v, &value.String{Value: tt.expect}); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})

	t.Run("get from invalid id", func(t *testing.T) {
		tests := []struct {
			name    value.Value
			expect  string
			isError bool
		}{
			{name: &value.String{Value: "X-Custom-Header"}, expect: ""},
			{name: &value.String{Value: "X-Not-Found"}, expect: ""},
			{name: &value.String{Value: "OBJECT:foo"}, expect: ""},
			{name: &value.String{Value: "OBJECT:baz"}, expect: ""},
			{name: &value.Integer{Value: 10}, expect: ""},
			{name: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: &value.Float{Value: 10}, expect: ""},
			{name: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: &value.Boolean{Value: false}, expect: ""},
			{name: &value.Boolean{Value: true, Literal: true}, expect: ""}, // BOOL could be provide as literal
			{name: &value.RTime{Value: time.Second}, expect: ""},
			{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: &value.Time{Value: time.Now()}, expect: ""},
			{name: &value.IP{Value: net.ParseIP("192.168.0.1")}, expect: ""},
			{name: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, expect: ""},
			{name: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			resp := &ghttp.Response{
				Header: ghttp.Header{},
			}
			resp.Header.Set("X-Custom-Header", "value")
			resp.Header.Add("Object", "foo=valuefoo")
			resp.Header.Add("Object", "bar=valuebar")
			ctx := &context.Context{Response: http.WrapResponse(resp)}

			v, err := Header_get(ctx, &value.Ident{Value: "foo"}, tt.name)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_get should return error but non-nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_get should not return error but non-nil: %s", i, err)
					continue
				}
			}

			if diff := cmp.Diff(v, &value.String{Value: tt.expect}); diff != "" {
				t.Errorf("[%d] Unexpected value returned, diff=%s", i, diff)
			}
		}
	})
}
