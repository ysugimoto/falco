// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"net"
	ghttp "net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/ysugimoto/falco/ast"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/http"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of header.filter_except
// Arguments may be:
// - ID, STRING_LIST
// Reference: https://developer.fastly.com/reference/vcl/functions/headers/header-filter-except/
func Test_Header_filter_except(t *testing.T) {

	t.Run("filter except from req", func(t *testing.T) {
		tests := []struct {
			name       value.Value
			isExepcted bool
			isError    bool
		}{
			{name: &value.String{Value: "X-Custom-Header"}, isExepcted: true},
			{name: &value.String{Value: "X-Not-Found"}},
			{name: &value.String{Value: "Fastly-FF"}},
			{name: &value.Integer{Value: 10}},
			{name: &value.Integer{Value: 10, Literal: true}, isError: true},
			{name: &value.Float{Value: 10}},
			{name: &value.Float{Value: 10, Literal: true}, isError: true},
			{name: &value.Boolean{Value: false}},
			{name: &value.Boolean{Value: true, Literal: true}}, // BOOL could be provide as literal
			{name: &value.RTime{Value: time.Second}},
			{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
			{name: &value.Time{Value: time.Now()}, isError: true},
			{name: &value.IP{Value: net.ParseIP("192.168.0.1")}},
			{name: &value.Backend{
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}},
			{name: &value.Backend{
				Literal: true,
				Value: &ast.BackendDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
			{name: &value.Acl{
				Value: &ast.AclDeclaration{
					Name: &ast.Ident{Value: "example"},
				},
			}, isError: true},
		}

		for i, tt := range tests {
			req := httptest.NewRequest(ghttp.MethodGet, "http://localhost:3124", nil)
			req.Header.Set("Fastly-FF", "test")
			req.Header.Set("X-Custom-Header", "value")
			req.Header.Set("X-Additional-Header", "value")
			ctx := &context.Context{Request: http.WrapRequest(req)}

			_, err := Header_filter_except(ctx, &value.Ident{Value: "req"}, tt.name)
			if tt.isError {
				if err == nil {
					t.Errorf("[%d] Header_filter_except should return error but nil", i)
				}
				continue
			} else {
				if err != nil {
					t.Errorf("[%d] Header_filter_except should not error but non-nil: %s", i, err)
				}
			}

			actual := req.Header.Get("X-Custom-Header")
			if tt.isExepcted {
				if actual == "" {
					t.Errorf("[%d] Could not be excepted header", i)
				}
			} else {
				if actual != "" {
					t.Errorf("[%d] Unexpected header has been expected: %s", i, actual)
				}
			}

			if req.Header.Get("Fastly-FF") == "" {
				t.Errorf("[%d] Protected header must not be removed", i)
			}
		}
	})
	/*
		t.Run("filter except from bereq", func(t *testing.T) {
			tests := []struct {
				name       value.Value
				isExepcted bool
				isError    bool
			}{
				{name: &value.String{Value: "X-Custom-Header"}, isExepcted: true},
				{name: &value.String{Value: "X-Not-Found"}},
				{name: &value.String{Value: "Fastly-FF"}},
				{name: &value.Integer{Value: 10}},
				{name: &value.Integer{Value: 10, Literal: true}, isError: true},
				{name: &value.Float{Value: 10}},
				{name: &value.Float{Value: 10, Literal: true}, isError: true},
				{name: &value.Boolean{Value: false}},
				{name: &value.Boolean{Value: true, Literal: true}}, // BOOL could be provide as literal
				{name: &value.RTime{Value: time.Second}},
				{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
				{name: &value.Time{Value: time.Now()}},
				{name: &value.IP{Value: net.ParseIP("192.168.0.1")}},
				{name: &value.Backend{
					Value: &ast.BackendDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}},
				{name: &value.Backend{
					Literal: true,
					Value: &ast.BackendDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}, isError: true},
				{name: &value.Acl{
					Value: &ast.AclDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}, isError: true},
			}

			for i, tt := range tests {
				req := httptest.NewRequest(http.MethodGet, "http://localhost:3124", nil)
				req.Header.Set("Fastly-FF", "test")
				req.Header.Set("X-Custom-Header", "value")
				req.Header.Set("X-Additional-Header", "value")
				ctx := &context.Context{BackendRequest: req}

				_, err := Header_filter_except(ctx, &value.Ident{Value: "bereq"}, tt.name)
				if tt.isError {
					if err == nil {
						t.Errorf("[%d] Header_filter_except should return error but non-nil", i)
					}
					continue
				}

				actual := req.Header.Get("X-Custom-Header")
				if tt.isExepcted {
					if actual == "" {
						t.Errorf("[%d] Could not be excepted header", i)
					}
				} else {
					if actual != "" {
						t.Errorf("[%d] Unexpected header has been expected", i)
					}
				}

				if req.Header.Get("Fastly-FF") == "" {
					t.Errorf("[%d] Protected header must not be removed", i)
				}
			}
		})

		t.Run("filter except from beresp", func(t *testing.T) {
			tests := []struct {
				name       value.Value
				isExepcted bool
				isError    bool
			}{
				{name: &value.String{Value: "X-Custom-Header"}, isExepcted: true},
				{name: &value.String{Value: "X-Not-Found"}},
				{name: &value.String{Value: "Fastly-FF"}},
				{name: &value.Integer{Value: 10}},
				{name: &value.Integer{Value: 10, Literal: true}, isError: true},
				{name: &value.Float{Value: 10}},
				{name: &value.Float{Value: 10, Literal: true}, isError: true},
				{name: &value.Boolean{Value: false}},
				{name: &value.Boolean{Value: true, Literal: true}}, // BOOL could be provide as literal
				{name: &value.RTime{Value: time.Second}},
				{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
				{name: &value.Time{Value: time.Now()}},
				{name: &value.IP{Value: net.ParseIP("192.168.0.1")}},
				{name: &value.Backend{
					Value: &ast.BackendDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}},
				{name: &value.Backend{
					Literal: true,
					Value: &ast.BackendDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}, isError: true},
				{name: &value.Acl{
					Value: &ast.AclDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}, isError: true},
			}

			for i, tt := range tests {
				resp := &http.Response{
					Header: http.Header{},
				}
				resp.Header.Set("Fastly-FF", "test")
				resp.Header.Set("X-Custom-Header", "value")
				resp.Header.Set("X-Additional-Header", "value")
				ctx := &context.Context{BackendResponse: resp}

				_, err := Header_filter_except(ctx, &value.Ident{Value: "beresp"}, tt.name)
				if tt.isError {
					if err == nil {
						t.Errorf("[%d] Header_filter_except should return error but non-nil", i)
					}
					continue
				}

				actual := resp.Header.Get("X-Custom-Header")
				if tt.isExepcted {
					if actual == "" {
						t.Errorf("[%d] Could not be excepted header", i)
					}
				} else {
					if actual != "" {
						t.Errorf("[%d] Unexpected header has been expected", i)
					}
				}

				if resp.Header.Get("Fastly-FF") == "" {
					t.Errorf("[%d] Protected header must not be removed", i)
				}
			}
		})

		t.Run("filter except from obj", func(t *testing.T) {
			tests := []struct {
				name       value.Value
				isExepcted bool
				isError    bool
			}{
				{name: &value.String{Value: "X-Custom-Header"}, isExepcted: true},
				{name: &value.String{Value: "X-Not-Found"}},
				{name: &value.String{Value: "Fastly-FF"}},
				{name: &value.Integer{Value: 10}},
				{name: &value.Integer{Value: 10, Literal: true}, isError: true},
				{name: &value.Float{Value: 10}},
				{name: &value.Float{Value: 10, Literal: true}, isError: true},
				{name: &value.Boolean{Value: false}},
				{name: &value.Boolean{Value: true, Literal: true}}, // BOOL could be provide as literal
				{name: &value.RTime{Value: time.Second}},
				{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
				{name: &value.Time{Value: time.Now()}},
				{name: &value.IP{Value: net.ParseIP("192.168.0.1")}},
				{name: &value.Backend{
					Value: &ast.BackendDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}},
				{name: &value.Backend{
					Literal: true,
					Value: &ast.BackendDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}, isError: true},
				{name: &value.Acl{
					Value: &ast.AclDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}, isError: true},
			}

			for i, tt := range tests {
				resp := &http.Response{
					Header: http.Header{},
				}
				resp.Header.Set("Fastly-FF", "test")
				resp.Header.Set("X-Custom-Header", "value")
				resp.Header.Set("X-Additional-Header", "value")
				ctx := &context.Context{Object: resp}

				_, err := Header_filter_except(ctx, &value.Ident{Value: "obj"}, tt.name)
				if tt.isError {
					if err == nil {
						t.Errorf("[%d] Header_filter_except should return error but non-nil", i)
					}
					continue
				}

				actual := resp.Header.Get("X-Custom-Header")
				if tt.isExepcted {
					if actual == "" {
						t.Errorf("[%d] Could not be excepted header", i)
					}
				} else {
					if actual != "" {
						t.Errorf("[%d] Unexpected header has been expected", i)
					}
				}

				if resp.Header.Get("Fastly-FF") == "" {
					t.Errorf("[%d] Protected header must not be removed", i)
				}
			}
		})
		t.Run("filter except from response", func(t *testing.T) {
			tests := []struct {
				name       value.Value
				isExepcted bool
				isError    bool
			}{
				{name: &value.String{Value: "X-Custom-Header"}, isExepcted: true},
				{name: &value.String{Value: "X-Not-Found"}},
				{name: &value.String{Value: "Fastly-FF"}},
				{name: &value.Integer{Value: 10}},
				{name: &value.Integer{Value: 10, Literal: true}, isError: true},
				{name: &value.Float{Value: 10}},
				{name: &value.Float{Value: 10, Literal: true}, isError: true},
				{name: &value.Boolean{Value: false}},
				{name: &value.Boolean{Value: true, Literal: true}}, // BOOL could be provide as literal
				{name: &value.RTime{Value: time.Second}},
				{name: &value.RTime{Value: time.Second, Literal: true}, isError: true},
				{name: &value.Time{Value: time.Now()}},
				{name: &value.IP{Value: net.ParseIP("192.168.0.1")}},
				{name: &value.Backend{
					Value: &ast.BackendDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}},
				{name: &value.Backend{
					Literal: true,
					Value: &ast.BackendDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}, isError: true},
				{name: &value.Acl{
					Value: &ast.AclDeclaration{
						Name: &ast.Ident{Value: "example"},
					},
				}, isError: true},
			}

			for i, tt := range tests {
				resp := &http.Response{
					Header: http.Header{},
				}
				resp.Header.Set("Fastly-FF", "test")
				resp.Header.Set("X-Custom-Header", "value")
				resp.Header.Set("X-Additional-Header", "value")
				ctx := &context.Context{Response: resp}

				_, err := Header_filter_except(ctx, &value.Ident{Value: "resp"}, tt.name)
				if tt.isError {
					if err == nil {
						t.Errorf("[%d] Header_filter_except should return error but non-nil", i)
					}
					continue
				}

				actual := resp.Header.Get("X-Custom-Header")
				if tt.isExepcted {
					if actual == "" {
						t.Errorf("[%d] Could not be excepted header", i)
					}
				} else {
					if actual != "" {
						t.Errorf("[%d] Unexpected header has been expected", i)
					}
				}

				if resp.Header.Get("Fastly-FF") == "" {
					t.Errorf("[%d] Protected header must not be removed", i)
				}
			}
		})
	*/
}
