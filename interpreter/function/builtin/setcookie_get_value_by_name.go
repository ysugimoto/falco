// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/http"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Setcookie_get_value_by_name_Name = "setcookie.get_value_by_name"

var Setcookie_get_value_by_name_ArgumentTypes = []value.Type{value.IdentType, value.StringType}

func Setcookie_get_value_by_name_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Setcookie_get_value_by_name_Name, 2, args)
	}
	for i := range args {
		if args[i].Type() != Setcookie_get_value_by_name_ArgumentTypes[i] {
			return errors.TypeMismatch(Setcookie_get_value_by_name_Name, i+1, Setcookie_get_value_by_name_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of setcookie.get_value_by_name
// Arguments may be:
// - ID, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/miscellaneous/setcookie-get-value-by-name/
func Setcookie_get_value_by_name(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Setcookie_get_value_by_name_Validate(args); err != nil {
		return value.Null, err
	}

	where := value.Unwrap[*value.Ident](args[0])
	name := value.Unwrap[*value.String](args[1])

	var resp *http.Response
	switch where.Value {
	case "beresp":
		if !ctx.Scope.Is(context.FetchScope) {
			return value.Null, errors.New(
				Setcookie_get_value_by_name_Name, "beresp is not accessible in %s scope", ctx.Scope,
			)
		}
		resp = ctx.BackendResponse
	case "resp":
		if !ctx.Scope.Is(context.DeliverScope, context.LogScope) {
			return value.Null, errors.New(
				Setcookie_get_value_by_name_Name, "resp is not accessible in %s scope", ctx.Scope,
			)
		}
		resp = ctx.Response
	default:
		return value.Null, errors.New(
			Setcookie_get_value_by_name_Name, "Invalid ident: %s", where.Value,
		)
	}

	var found bool
	var cookie string
	for _, c := range resp.Cookies() {
		// Consider multiple cookies.
		// From the function spec, function should return the last matched one
		if c.Name == name.Value {
			found = true
			cookie = c.Value
		}
	}

	if !found {
		return &value.String{IsNotSet: true}, nil
	}
	return &value.String{Value: cookie}, nil
}
