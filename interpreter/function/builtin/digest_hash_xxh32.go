// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"fmt"

	"github.com/pierrec/xxHash/xxHash32"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly uses fixed seed as uint32(0)
const Digest_hash_xxh32_Seed uint32 = 00

const Digest_hash_xxh32_Name = "digest.hash_xxh32"

var Digest_hash_xxh32_ArgumentTypes = []value.Type{value.StringType}

func Digest_hash_xxh32_Validate(args []value.Value) error {
	if len(args) != 1 {
		return errors.ArgumentNotEnough(Digest_hash_xxh32_Name, 1, args)
	}
	for i := range args {
		if args[i].Type() != Digest_hash_xxh32_ArgumentTypes[i] {
			return errors.TypeMismatch(Digest_hash_xxh32_Name, i+1, Digest_hash_xxh32_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of digest.hash_xxh32
// Arguments may be:
// - STRING
// Reference:
func Digest_hash_xxh32(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Digest_hash_xxh32_Validate(args); err != nil {
		return value.Null, err
	}

	input := value.Unwrap[*value.String](args[0])
	hash := xxHash32.New(Digest_hash_xxh32_Seed)
	hash.Write([]byte(input.Value))

	return &value.String{
		// xxHash32 always returns fixed 8 byte-length string
		Value: fmt.Sprintf("%08x", hash.Sum32()),
	}, nil
}
