// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"testing"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of std.strcasecmp
// Arguments may be:
// - STRING, STRING
// Reference:
func Test_Std_strcasecmp(t *testing.T) {
	tests := []struct {
		name     string
		haystack string
		needle   string
		expect   bool
	}{
		{
			name:     "expect true",
			haystack: "/headers",
			needle:   "/HeaDers",
			expect:   true,
		},
		{
			name:     "expect false",
			haystack: "/headers/",
			needle:   "/HeaDers",
			expect:   false,
		},
	}

	for _, tt := range tests {
		actual, err := Std_strcasecmp(
			&context.Context{},
			&value.String{Value: tt.haystack},
			&value.String{Value: tt.needle},
		)
		if err != nil {
			t.Errorf("[%s] Unexpected error: %s", tt.name, err)
			return
		}
		if actual.Type() != value.BooleanType {
			t.Errorf("[%s] Unexpected return type, expect=BOOL, got=%s", tt.name, actual.Type())
			return
		}
		v := value.Unwrap[*value.Boolean](actual)
		if v.Value != tt.expect {
			t.Errorf("[%s] return value unmatch, expect=%t, got=%t", tt.name, tt.expect, v.Value)
		}
	}
}
