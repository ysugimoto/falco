// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"testing"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of bin.hex_to_base64
// Arguments may be:
// - STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/cryptographic/bin-hex-to-base64/
func Test_Bin_hex_to_base64(t *testing.T) {

	table := []struct {
		input   string
		expect  string
		isError bool
	}{
		{
			input:  "010203040506070809",
			expect: "AQIDBAUGBwgJ",
		},
		{
			input:  "009F00C2003300",
			expect: "AJ8AwgAzAA==",
		},
		{
			input:   "--zz",
			expect:  "",
			isError: true,
		},
		{
			input:  "",
			expect: "",
		},
		{
			input:  "61626364",
			expect: "YWJjZA==",
		},
	}

	for _, tt := range table {
		ctx := new(context.Context)
		ret, err := Bin_hex_to_base64(
			ctx,
			&value.String{Value: tt.input},
		)
		if err != nil {
			t.Errorf("Unexpected error: %s", err)
		}
		if ret.Type() != value.StringType {
			t.Errorf("Unexpected type returned, expect=%s, got=%s", value.StringType, ret.Type())
		}
		v := value.Unwrap[*value.String](ret)
		if v.Value != tt.expect {
			t.Errorf("Unexpected value returned, expect=%s, got=%s", tt.expect, v.Value)
		}
		if tt.isError {
			if ctx.FastlyError.Value != "EINVAL" {
				t.Errorf("EINVAL should be set on fastly.error")
			}
		}
	}
}
