// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/http"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Setcookie_delete_by_name_Name = "setcookie.delete_by_name"

var Setcookie_delete_by_name_ArgumentTypes = []value.Type{value.IdentType, value.StringType}

func Setcookie_delete_by_name_Validate(args []value.Value) error {
	if len(args) != 2 {
		return errors.ArgumentNotEnough(Setcookie_delete_by_name_Name, 2, args)
	}
	for i := range args {
		if args[i].Type() != Setcookie_delete_by_name_ArgumentTypes[i] {
			return errors.TypeMismatch(Setcookie_delete_by_name_Name, i+1, Setcookie_delete_by_name_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of setcookie.delete_by_name
// Arguments may be:
// - ID, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/miscellaneous/setcookie-delete-by-name/
func Setcookie_delete_by_name(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Setcookie_delete_by_name_Validate(args); err != nil {
		return value.Null, err
	}

	where := value.Unwrap[*value.Ident](args[0])
	name := value.Unwrap[*value.String](args[1])

	var resp *http.Response
	switch where.Value {
	case "beresp":
		if !ctx.Scope.Is(context.FetchScope) {
			return value.Null, errors.New(Setcookie_delete_by_name_Name, "beresp is not accessible in %s scope", ctx.Scope)
		}
		resp = ctx.BackendResponse
	case "resp":
		if !ctx.Scope.Is(context.DeliverScope, context.LogScope) {
			return value.Null, errors.New(Setcookie_delete_by_name_Name, "resp is not accessible in %s scope", ctx.Scope)
		}
		resp = ctx.Response
	default:
		return value.Null, errors.New(
			Setcookie_delete_by_name_Name, "Invalid ident: %s", where.Value,
		)
	}

	var ignored bool
	var cookies []string
	for _, c := range resp.Cookies() {
		if c.Name == name.Value {
			ignored = true
			continue
		}
		cookies = append(cookies, c.String())
	}

	if !ignored {
		return &value.Boolean{Value: false}, nil
	}

	// Replace Set-Cookie headers
	resp.Header.Del("Set-Cookie")
	for _, c := range cookies {
		resp.Header.Add("Set-Cookie", c)
	}
	return &value.Boolean{Value: true}, nil
}
