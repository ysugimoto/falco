// Code generated by __generator__/interpreter.go at once

package builtin

import (
	ghttp "net/http"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/http"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of setcookie.get_value_by_name
// Arguments may be:
// - ID, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/miscellaneous/setcookie-get-value-by-name/
func Test_Setcookie_get_value_by_name(t *testing.T) {
	tests := []struct {
		setCookie []string
		name      string
		expect    *value.String
	}{
		{
			setCookie: []string{"foo=bar"},
			name:      "baz",
			expect:    &value.String{IsNotSet: true},
		},
		{
			setCookie: []string{"foo=bar"},
			name:      "foo",
			expect:    &value.String{Value: "bar"},
		},
		{
			setCookie: []string{"foo=bar", "lorem=ipsum", "lorem=ipsum2"},
			name:      "lorem",
			expect:    &value.String{Value: "ipsum2"},
		},
	}

	for i, tt := range tests {
		resp := &ghttp.Response{
			Header: ghttp.Header{},
		}
		for _, c := range tt.setCookie {
			resp.Header.Add("Set-Cookie", c)
		}

		ret, err := Setcookie_get_value_by_name(
			&context.Context{Scope: context.DeliverScope, Response: http.WrapResponse(resp)},
			&value.Ident{Value: "resp"},
			&value.String{Value: tt.name},
		)
		if err != nil {
			t.Errorf("[%d] Unexpected error: %s", i, err)
		}
		if ret.Type() != value.StringType {
			t.Errorf("[%d] Unexpected return type, expect=STRING, got=%s", i, ret.Type())
		}
		v := value.Unwrap[*value.String](ret)
		if diff := cmp.Diff(tt.expect, v); diff != "" {
			t.Errorf("[%d] Remaining set-cookie value unmatch, diff=%s", i, diff)
		}
	}
}
